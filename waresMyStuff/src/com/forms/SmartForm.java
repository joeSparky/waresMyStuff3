package com.forms;

import java.lang.annotation.Documented;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;

import com.db.SessionVars;

/**
 * manage categories and user locations
 * 
 * @author joe
 * 
 */
@Documented
@Retention(RetentionPolicy.RUNTIME)
@interface AnnotationForRuntime {
	String author();

	String jmm();
}

@AnnotationForRuntime(author = "dk", jmm = "ddf")
public abstract class SmartForm {

	protected SmartForm(FormsMatrixDynamic fmd, SessionVars sVars) {
		constructor(fmd, sVars);
	}

	// public boolean selectedLastTime = false;

	public void constructor(FormsMatrixDynamic fmd, SessionVars sVars) {
		this.fmd = fmd;
		this.sVars = sVars;
	}

	public FormsMatrixDynamic fmd = null;
	public SessionVars sVars = null;

	public boolean getFormAlreadyDone = false;


	public FormsArray processButtons(SessionVars sVars) throws Exception {
		return new FormsArray();

//		if (ret.cancelClicked(sVars)) {
//			// get the dispatch form
//			ret.addAll(new XML(sVars).getDispatch(sVars).getForm(sVars));
//			ret.standardForm();
//			return ret;
//		}
//
//		boolean returnedWithoutException = false;
//		FormsArray retSoFar = null;
//		// process the request, report the errors to the user
//		try {
//			ret.addAll(extractParams(sVars));
//			returnedWithoutException = true;
//			ret.errorToUser("input not found");
//		} catch (EndOfInputException e) {
//			// normal end of input processing
//			retSoFar = new FormsArray();
//			retSoFar = e.getForm();
//		} catch (Exception e) {
//			ret.errorToUser(e);
//		}
//
//		if (retSoFar != null)
//			ret.addAll(retSoFar);
//
//		// keep the unread returnedWithoutException from causing an
//		// unused variable warning. Keep for breakpoint
//		if (returnedWithoutException)
//			returnedWithoutException = true;
//
//		// if one of the methods that processed the request want to go back to the
//		// dispatch screen
//		if (ret.status == FormsArray.STATUS.BACKTODISPATCH) {
//			Internals.logWithDate();
//			try {
//				ret.addAll(new XML(sVars).getDispatch(sVars).getForm(sVars));
//			} catch (Exception e) {
//				ret.errorToUser(e);
//			}
//			ret.standardForm();
//			return ret;
//		}
//
//		// get the form for the next screen
//		try {
//			Internals.logWithDate();
//			ret.addAll(getForm(sVars));
//			Internals.logWithDate();
//		} catch (Exception e) {
//			ret.errorToUser(e);
//		}
//
//		// if getForm didn't get far enough to set RETURNTO
//		if (ret.getReturnToString() == null) {
//			Internals.logWithDate();
//			SmartForm login = null;
//			try {
//				login = new XML(sVars).getLogin(sVars);
//				// go back to the login form
//				ret.addAll(login.getForm(sVars));
//			} catch (Exception e) {
//				// if we can't get a login form, we're broken.
//				// try to log the error
//				Internals.logStartupError(e);
//			}
//			// no standard form
//			return ret;
//		}
//		// add the standard ending to the form generated by extractParams
//		ret.standardForm();
//
//		try {
//			ret.validInternalForm();
//		} catch (Exception e) {
//			ret.errorToUser(e);
//		}
//		Internals.logWithDate();
//		return ret;
	}

	public boolean needsUpdateOrAdd = false;

	public FormsArray extractParams(SessionVars sVars) throws Exception {
		getFormAlreadyDone = false;
		needsUpdateOrAdd = false;
		return new FormsArray();
	}

//	public FormsArray extractParams(SessionVars sVars, FormsMatrixDynamic fm) throws Exception {
//		return extractParams(sVars);
//	}

	/**
	 * general form
	 */
	public FormsArray getForm(SessionVars sVars) throws Exception {
		return new FormsArray();
	}

//	public FormsArray callBack(SessionVars sVars, FormsMatrixDynamic fmd) throws Exception {
//		FormsArray ret = new FormsArray();
//		if (callBackVar != null) {
//			ret.addAll(callBackVar.callBack(sVars, fmd));
//		} else {
//			throw new ExceptionCoding("null callback");
//		}
//		return ret;
//	}

//	/**
//	 * when a callback does not match what the form was looking for
//	 * 
//	 * @param sVars
//	 * @param whoFinished
//	 * @param status
//	 * @param object
//	 * @return
//	 * @throws Exception
//	 */
//	public FormsArray callBackNotHandled(SessionVars sVars, CalledInfo calledInfo) throws Exception {
//		FormsArray ret = new FormsArray();
//		// try passing it up
//		if (callBackVar != null)
//			ret.addAll(callBackVar.callBack(sVars, calledInfo));
//		else
//			throw new ExceptionCoding(
//					"unclaimed callback, status " + calledInfo.status + " whoFinished " + calledInfo.whoFinished);
//		return ret;
//	}

	// protected FormsArray done(SessionVars sVars) {
	// return new Dispatch(sVars).getForm(sVars);
	// }
	public FormsArray backToDispatch(SessionVars sVars) {
		FormsArray ret = new FormsArray();
		ret.status = FormsArray.STATUS.BACKTODISPATCH;
		sVars.clearParameterMap();
		return ret;
	}

	public enum INSTATE {
		/**
		 * display nothing
		 */
		NOTINITIALIZED, DISPLAYONLY,
		/**
		 * display a brief read only summary but allow the user to cancel the selection
		 */
		DISPLAYONLYCANCEL,
		/**
		 * display the standard form
		 */
		STANDARDFORM, STANDARDFORMWITHFOCUS, ALLFAMILIES,
		/**
		 * don't display anything
		 */
		DISABLED, MEMBERSRECEIVEWITHOUTBARCODES, MEMBERSPICKWITHOUTORDER
	}

	public String handleNull(String str) {
		if (str == null)
			return "";
		// leading space for the remainder of the title
		return str + " ";
	}

	public void syncTarget() throws Exception {
	}

	/**
	 * let the form return its return to value
	 * 
	 * @return
	 */
	public String getReturnTo() throws Exception {
		return null;
	}

}
